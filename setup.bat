@echo off
setlocal enabledelayedexpansion

REM Script d'installation et de d√©marrage pour Chocolatey CMS (Windows)
REM Usage: setup.bat [clean|start|stop|restart|logs|status]

REM Couleurs pour Windows (limit√©es)
set "RED=[91m"
set "GREEN=[92m"
set "YELLOW=[93m"
set "BLUE=[94m"
set "PURPLE=[95m"
set "NC=[0m"

REM Fonction pour afficher l'en-t√™te
:print_header
echo.
echo %PURPLE%================================================================%NC%
echo %PURPLE%               üç´ CHOCOLATEY CMS DOCKER SETUP üç´%NC%
echo %PURPLE%================================================================%NC%
echo.
goto :eof

REM Fonction pour afficher un succ√®s
:print_success
echo %GREEN%‚úÖ %~1%NC%
goto :eof

REM Fonction pour afficher une info
:print_info
echo %BLUE%‚ÑπÔ∏è  %~1%NC%
goto :eof

REM Fonction pour afficher un avertissement
:print_warning
echo %YELLOW%‚ö†Ô∏è  %~1%NC%
goto :eof

REM Fonction pour afficher une erreur
:print_error
echo %RED%‚ùå %~1%NC%
goto :eof

REM V√©rification des pr√©requis
:check_requirements
call :print_info "V√©rification des pr√©requis..."

docker --version >nul 2>&1
if errorlevel 1 (
    call :print_error "Docker n'est pas install√©. Veuillez installer Docker Desktop."
    exit /b 1
)

docker-compose --version >nul 2>&1
if errorlevel 1 (
    call :print_error "Docker Compose n'est pas install√©. Veuillez installer Docker Compose."
    exit /b 1
)

docker info >nul 2>&1
if errorlevel 1 (
    call :print_error "Docker n'est pas d√©marr√©. Veuillez d√©marrer Docker Desktop."
    exit /b 1
)

call :print_success "Tous les pr√©requis sont satisfaits"
goto :eof

REM Installation propre
:clean_install
call :print_header
call :print_info "üßπ Installation propre de Chocolatey CMS..."

call :check_requirements
if errorlevel 1 exit /b 1

call :print_info "Arr√™t des conteneurs existants..."
docker-compose down -v --remove-orphans >nul 2>&1

call :print_info "Nettoyage des images Docker..."
docker system prune -f >nul 2>&1

call :print_warning "Suppression des volumes de donn√©es existants..."
docker volume rm chocolatey-2500_mysql_data chocolatey-2500_redis_data >nul 2>&1

if not exist .env (
    call :print_info "Cr√©ation du fichier de configuration .env..."
    copy .env.docker .env >nul
)

call :print_info "Construction des images Docker..."
docker-compose build --no-cache

call :print_info "D√©marrage des services..."
docker-compose up -d

call :print_info "Attente du d√©marrage des services..."
timeout /t 30 >nul

call :print_success "Installation termin√©e avec succ√®s !"
call :show_access_info
goto :eof

REM D√©marrage simple
:start
call :print_header
call :print_info "üöÄ D√©marrage de Chocolatey CMS..."

call :check_requirements
if errorlevel 1 exit /b 1

if not exist .env (
    copy .env.docker .env >nul
    call :print_info "Fichier .env cr√©√©"
)

docker-compose up -d
call :print_success "Services d√©marr√©s"
call :show_access_info
goto :eof

REM Arr√™t
:stop
call :print_info "üõë Arr√™t de Chocolatey CMS..."
docker-compose down
call :print_success "Services arr√™t√©s"
goto :eof

REM Red√©marrage
:restart
call :print_info "üîÑ Red√©marrage de Chocolatey CMS..."
call :stop
timeout /t 5 >nul
call :start
goto :eof

REM Affichage des logs
:show_logs
call :print_info "üìã Affichage des logs..."
docker-compose logs -f
goto :eof

REM Statut des services
:show_status
call :print_info "üìä Statut des services:"
echo.
docker-compose ps
echo.
goto :eof

REM Informations d'acc√®s
:show_access_info
echo.
call :print_info "üåê URLs d'acc√®s:"
echo    %GREEN%Application principale:%NC% http://localhost:8080
echo    %GREEN%phpMyAdmin:%NC%          http://localhost:8081
echo    %GREEN%Redis Commander:%NC%     http://localhost:8082
echo    %GREEN%MailHog (emails):%NC%    http://localhost:8025
echo.
call :print_info "üîë Identifiants par d√©faut:"
echo    %GREEN%Admin:%NC% admin / admin123
echo    %GREEN%Demo:%NC%  demo / demo123
echo    %GREEN%MySQL:%NC% chocolatey / chocolatey_password
echo.
call :print_info "üìö Commandes utiles:"
echo    %GREEN%Logs:%NC%      setup.bat logs
echo    %GREEN%Statut:%NC%    setup.bat status
echo    %GREEN%Arr√™t:%NC%     setup.bat stop
echo    %GREEN%Restart:%NC%   setup.bat restart
echo.
goto :eof

REM Menu d'aide
:show_help
call :print_header
echo Usage: setup.bat [COMMAND]
echo.
echo Commandes disponibles:
echo   clean     Installation propre (supprime toutes les donn√©es)
echo   start     D√©marrage des services
echo   stop      Arr√™t des services
echo   restart   Red√©marrage des services
echo   logs      Affichage des logs en temps r√©el
echo   status    Statut des services
echo   help      Affichage de cette aide
echo.
echo Si aucune commande n'est sp√©cifi√©e, 'start' sera ex√©cut√©.
goto :eof

REM Script principal
if not exist docker-compose.yml (
    call :print_error "Ce script doit √™tre ex√©cut√© depuis le r√©pertoire racine du projet"
    exit /b 1
)

set "command=%~1"
if "%command%"=="" set "command=start"

if "%command%"=="clean" (
    call :clean_install
) else if "%command%"=="start" (
    call :start
) else if "%command%"=="stop" (
    call :stop
) else if "%command%"=="restart" (
    call :restart
) else if "%command%"=="logs" (
    call :show_logs
) else if "%command%"=="status" (
    call :show_status
) else if "%command%"=="help" (
    call :show_help
) else if "%command%"=="-h" (
    call :show_help
) else if "%command%"=="--help" (
    call :show_help
) else (
    call :print_error "Commande inconnue: %command%"
    call :show_help
    exit /b 1
)

endlocal